name: CI/CD
on:
  workflow_dispatch:
    branches:
      - main
  push:
    branches:
      - dev
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ca-central-1
  
permissions:
  id-token: write
  contents: read

outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

jobs:
  test-codes:
    runs-on: ubuntu-latest

    steps:
    # step 1: Checkout the code from repositiory
      - name: Checkout Code
        uses: actions/checkout@v3
    # step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
        node-version: '18' # Specify the Node.js version
    # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          npm install
          npm install --save-dev jest jsdom
    # Step 4: Run Tests
      - name: Run Tests
        run: npx jest  

  Create-ECR-Repo:
  # This job creates ECR repository
    needs: test-codes
    steps:
    # Step 1: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
    # Step 2: Check or Create ECR Repository
      - name: Check or Create ECR Repository
        id: ecr-check
        run: |
          REPO_NAME="${GITHUB_REPOSITORY,,}"
          REPO_EXISTS=$(aws ecr describe-repositories --repository-names $REPO_NAME --region $AWS_REGION 2>&1 || true)

          if echo "$REPO_EXISTS" | grep -q "RepositoryNotFoundException"; then
            echo "Repository does not exist. Creating repository $REPO_NAME..."
            aws ecr create-repository --repository-name $REPO_NAME --region $AWS_REGION
          else
            echo "Repository already exists."
            exit 0
          fi          

  Build_and_Publish:
  #This job builds and publish docker image
    needs: Create-ECR-Repo
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 3: Build and Push Docker Image to ECR
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/"${GITHUB_REPOSITORY,,}":1.0.0